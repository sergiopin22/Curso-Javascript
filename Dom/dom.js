// let nombre = prompt("cual es tu nombre")
// let texto = `hola ${nombre}`
// const hablar = (texto) =>{
// speechSynthesis.speak(new SpeechSynthesisUtterance(texto))
// }

// hablar(texto);


console.log("******ELEMENTOS DEL DOCUMENTO****************");
console.log(window.document)//con esto podemos mostrar el documento
console.log(document.head)//con esto podemos ver el head del documento
console.log(document.body)//con esto podemos ver el body  del documento
console.log(document.documentElement)//con esto podemos ver el html del documento
console.log(document.doctype)//con esto podemos ver el doctype del documento 
console.log(document.characterSet)//con esto podemos ver el tipo de caracter del documento UTF-8
console.log(document.title)//con esto podemos ver el titulo del documento
console.log(document.images)//con esto podemos ver las imagenes del documento
console.log(document.forms)//con esto podemos ver los formularios del documento
console.log(document.styleSheets)//con esto podemos ver las hojas de estilo del documento
console.log(document.scripts)//con esto podemos ver los scripts del documento
// setTimeout(() => {
    
//     console.log(document.getSelection().toString())//con esto podemos ver en consola en string lo que seleccionamos con el mouse, esta dentro de una funcion setimeout para poder alcanzar a seleccionar y se pueda ver lo que se selecciona
// },2000);

// document.write("<h2>probando document.write() desde javascript , pdta: no es buena practica</h2>")

//****************************** NODOS DEL DOM ************************************** */
// _Las siglas DOM significan Document Object Model, o lo que es lo mismo, la estructura del documento HTML. Una p√°gina HTML est√° formada por m√∫ltiples etiquetas HTML, anidadas una dentro de otra, formando un √°rbol de etiquetas relacionadas entre s√≠, que se denomina √°rbol DOM (o simplemente DOM).

// _En Javascript, cuando nos referimos al DOM nos referimos a esta estructura, que podemos modificar de forma din√°mica desde Javascript, a√±adiendo nuevas etiquetas, modificando o eliminando otras, cambiando sus atributos HTML, a√±adiendo clases, cambiando el contenido de texto, etc...

// _Al estar "amparado" por un lenguaje de programaci√≥n, todas estas tareas se pueden automatizar, incluso indicando que se realicen cuando el usuario haga acciones determinadas, como por ejemplo: pulsar un bot√≥n, mover el rat√≥n, hacer click en una parte del documento, escribir un texto, etc...

// *************************** EL OBJETO DOCUMENT *******************
// ?En Javascript, la forma de acceder al DOM es a trav√©s de un objeto llamado document, que representa el √°rbol DOM de la p√°gina o pesta√±a del navegador donde nos encontramos. En su interior pueden existir varios tipos de elementos, pero principalmente ser√°n  o :

// !ELEMENT no es m√°s que la representaci√≥n gen√©rica de una etiqueta: HTMLElement.
// !NODE es una unidad m√°s b√°sica, la cu√°l puede ser ELEMENT o un nodo de texto.


// Todos los elementos HTML, dependiendo del elemento que sean, tendr√°n un tipo de dato espec√≠fico. Algunos ejemplos:


// _HTMLElement	HTMLDivElement	<div>	Capa divisoria invisible (en bloque).
// _HTMLElement	HTMLSpanElement	<span>	Capa divisoria invisible (en l√≠nea).
// _HTMLElement	HTMLImageElement	<img>	Imagen.
// _HTMLElement	HTMLAudioElement	<audio>	Contenedor de audio.
// _Obviamente, existen muchos tipos de datos espec√≠ficos, uno por cada etiqueta HTML.


// *****************API NATIVA DE JAVASCRIPT **************************
// ?En los siguientes cap√≠tulos veremos que Javascript nos proporciona un conjunto de herramientas para trabajar de forma nativa con el DOM de la p√°gina, entre las que se encuentran:

// _üîçBuscar etiquetas	Familia de m√©todos entre los que se encuentran funciones como .getElementById(), .querySelector() o .querySelectorAll(), entre otras.
// *üîÆCrear etiquetas	Una serie de m√©todos y consejos para crear elementos en la p√°gina y trabajar con ellos de forma din√°mica.
// !üîåInsertar etiquetas	Las mejores formas de a√±adir elementos al DOM, ya sea utilizando propiedades como .innerHTML o m√©todo como .appendChild(), .insertAdjacentHTML(), entre otros.
// _üé≠Gesti√≥n de CSS	Consejos para la utilizaci√≥n de la API .classList de Javascript que nos permite manipular clases CSS desde JS, de modo que podamos a√±adir, modificar, eliminar clases de CSS de un elemento de una forma pr√°ctica y c√≥moda.
//?üö¢Navegar por tags	Utilizaci√≥n de una serie de m√©todos y propiedades que nos permiten ¬´navegar¬ª a trav√©s de la jerarqu√≠a del DOM, ci√±√©ndonos a la estructura del documento y la posici√≥n de los elementos en la misma.


//******************* */ NODOS ELEMENTOS Y SELECTORES ***************

// METODOS QUE YA NO SE USAN PERO HACEN PARTE DEL DOM

    console.log(document.getElementsByTagName("section"))// por nombre de etiqueta
    console.log(document.getElementsByClassName("card"))//por nombre de clase
    console.log(document.getElementsByName("name"))// por nombre de atributo name
    console.log(document.querySelector("#menu"))// consulta de selector, recibe como parametro un selecto valido de css, cualquier selector que no sean pseudoelementos o pseudoclases
    console.log(document.querySelector("a"))//aca me va atraer el primer link que encuentre o el primer elemento que encuentre 
    console.log(document.querySelectorAll("a"))//si queremos traernos todos los link o todos los elementos en base a una etiqueta utilizaamos queryselectorAll porque su nombre lo dice all que es todo y nos los trae.

    document.querySelectorAll("a").forEach((el) => console.log(el));

    console.log(document.querySelectorAll(".card")[2])//con esto  puedo acceder a la tarjeta que yo quiera en este caso la tarjeta 3, se colocan las llaves como se hace con los arrays

    console.log(document.querySelectorAll("#menu li"))//tambien recibe elementos descendientes en este caso nos va a encontrar los li que estan contenidos dentro de menu

    // !queryselectorall les quito el trabajo a getElementByTagName, getElementsByName y a getElementsByClassName

    // ?solo se utiliza hoy en dia getElementByID, querySelector y querySelectorAll

    // _DATOS DE QUERYSELECTOR INTERESANTE : "QUERYSELECTOR ES MAS LENTO EN EJECUTARSE QUE GETELEMENTBYID, JUSTAMENTE POR QUE EL QUERY TIENE QUE VALIDAR QUE TIPO DE SELECTOR DE CSS LE ESTAS PASANDO"

    console.clear();

    // ****************ATRIBUTOS Y DATA-ATTRIBUTES ************

    // _METODOS PARA DEFINIR, OBTENER Y ELIMINAR VALORES DE ATRIBUTOS 

    // *---  setAttribute() -- modifica el valor de un atributo
    // *---  getAttribute() -- obtiene el valor de un atributo
    // *---  removeAttribute() -- remueve el valor de un atributo
    // *---  hasAttribute() -- valida si tenemos un atributo en un elemento nos devuelve en valor bool

    console.log(document.documentElement.lang)
    console.log(document.documentElement.getAttribute("lang"))
    console.log(document.querySelector(".link-dom"))
    //console.log(document.querySelector(".link-dom").getAttribute("href"))//esta es la mejor forma con get attribute()

    // COMO ESTABLECER NUEVOS VALORES A LO ATRIBUTOS 

    document.documentElement.lang = "es"; //aca se lo cambiamos a es y estaba en en
    document.documentElement.setAttribute("lang", "es")

    const $linkDom = document.querySelector(".link-dom")//el simbolo $dolar nos indica que la variable con la cual
    //estamos tratando hace parte del dom o el html y no es una variable logica necesaria del programa en si. es buena practica aplicar el dolar para no confundirse con tantas variables

    $linkDom.setAttribute("target","blank")
    $linkDom.setAttribute("rel","noopener")
    // _En realidad, el rel=¬ªnoopener¬ª es solo una instrucci√≥n para que el navegador impida el uso del objeto window. opener de Javascript. Como sabes, los bots de los motores de b√∫squeda rastrean las webs para posicionarlas correctamente y no interact√∫an con el rel=¬ªnoopener¬ª.
    $linkDom.setAttribute("href","https://www.youtube.com/watch?v=l6npGZa_vgc&list=PLvq-jIkSeTUZ6QgYYO3MwG9EMqC-KoLXA&ab_channel=jonmircha")//!podemos modificar los atributos y valores de esos atributos

    console.log($linkDom.hasAttribute("target"))//nos devuelve true porque si existe este atributo en el elemento $linkDom

    $linkDom.removeAttribute("target")//aca removemos el atributo target 

    console.log($linkDom.hasAttribute("target"))//nos devuelve false porque ya no existe este atributo en el elemento $linkDom

    //!Data-Attributes
    // Attributes tambien funcionan con los Data-Attributes
    console.log($linkDom.getAttribute("data-description"));//imprime Document Object Model
    console.log($linkDom.dataset);//imprime el tipo de dato mapa, que nos muestra hay dos data-attributes que son el id y el description